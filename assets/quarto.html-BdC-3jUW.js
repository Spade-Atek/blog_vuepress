import{_ as s,c as a,b as p,o as t}from"./app-rk8iPNze.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h2 id="前言与环境准备" tabindex="-1"><a class="header-anchor" href="#前言与环境准备"><span>前言与环境准备</span></a></h2><h6 id="随着深度学习技术的快速发展-卷积神经网络-cnn-在计算机视觉领域得到了广泛应用。其中lenet作为经典的cnn结构-为后续神经网络的设计奠定了基础。本实验使用python-3-10及pytorch-2-0进行深度学习实验-运行环境为cpu-并基于conda创建虚拟环境pytorch-env-安装所需的pytorch相关库。旨在利用pytorch框架-实现一个基于lenet的神经网络模型-深入理解其训练过程及卷积操作在图像处理中的优势。以下是开发环境基础" tabindex="-1"><a class="header-anchor" href="#随着深度学习技术的快速发展-卷积神经网络-cnn-在计算机视觉领域得到了广泛应用。其中lenet作为经典的cnn结构-为后续神经网络的设计奠定了基础。本实验使用python-3-10及pytorch-2-0进行深度学习实验-运行环境为cpu-并基于conda创建虚拟环境pytorch-env-安装所需的pytorch相关库。旨在利用pytorch框架-实现一个基于lenet的神经网络模型-深入理解其训练过程及卷积操作在图像处理中的优势。以下是开发环境基础"><span>随着深度学习技术的快速发展，卷积神经网络（CNN）在计算机视觉领域得到了广泛应用。其中LeNet作为经典的CNN结构，为后续神经网络的设计奠定了基础。本实验使用Python 3.10及PyTorch 2.0进行深度学习实验，运行环境为CPU，并基于Conda创建虚拟环境pytorch_env，安装所需的PyTorch相关库。旨在利用PyTorch框架，实现一个基于LeNet的神经网络模型，深入理解其训练过程及卷积操作在图像处理中的优势。以下是开发环境基础：</span></a></h6><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">◾ Python 3.10</span>
<span class="line">◾ Conda Environment: pytorch_env</span>
<span class="line">◾ PyTorch 2.0</span>
<span class="line">◾ CPU</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-配置环境和下载数据集" tabindex="-1"><a class="header-anchor" href="#_1-配置环境和下载数据集"><span>1 配置环境和下载数据集</span></a></h2><h3 id="_1-1-配置-conda-环境" tabindex="-1"><a class="header-anchor" href="#_1-1-配置-conda-环境"><span>1.1 配置 Conda 环境</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 创建一个新的 Conda 环境，命名为 pytorch_env，使用 Python 3.10 版本</span></span>
<span class="line"><span class="token comment"># conda create -n pytorch_env python=3.10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 激活该环境</span></span>
<span class="line"><span class="token comment"># conda activate pytorch_env</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-安装-pytorch-和-torchvision" tabindex="-1"><a class="header-anchor" href="#_1-2-安装-pytorch-和-torchvision"><span>1.2 安装 PyTorch 和 torchvision</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 使用 conda 安装 PyTorch 及其相关工具包</span></span>
<span class="line"><span class="token comment"># conda install pytorch torchvision torchaudio -c pytorch</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-下载-mnist-数据集" tabindex="-1"><a class="header-anchor" href="#_1-3-下载-mnist-数据集"><span>1.3 下载 MNIST 数据集</span></a></h3><p>MNIST数据集 是一个经典的手写数字分类数据集，包含 60,000 张训练图像和 10,000 张测试图像。每张图像大小为 28x28 像素，灰度值范围为 [0,1]</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">以下是库的功能解释：</span>
<span class="line">torch：PyTorch 的核心库，提供张量计算和自动微分功能。</span>
<span class="line">torch.nn：用于构建神经网络模型（如 nn.Conv2d, nn.Linear）。</span>
<span class="line">torch.nn.functional：包含激活函数（如 F.relu）。</span>
<span class="line">torch.optim：提供优化算法（如 SGD）。</span>
<span class="line">torchvision.datasets：用于下载和加载数据集。</span>
<span class="line">torchvision.transforms：提供数据预处理工具（如 ToTensor 和 Normalize）。</span>
<span class="line">torch.utils.data.DataLoader：用于批量加载数据，提高训练效率。</span>
<span class="line">matplotlib.pyplot：用于可视化数据和训练结果。</span>
<span class="line">sklearn.metrics.confusion_matrix：计算模型预测的混淆矩阵。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 使用 conda 安装 PyTorch 及其相关工具包</span></span>
<span class="line"><span class="token comment"># conda install pytorch torchvision torchaudio -c pytorch</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 导入必要的库</span></span>
<span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义图像预处理流程</span></span>
<span class="line">transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下载并加载数据集（利用 torchvision 自动下载 MNIST 数据集。这个数据集包含手写数字图像，是机器学习领域的经典数据集。）</span></span>
<span class="line">train_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span></span>
<span class="line">    root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    transform<span class="token operator">=</span>transform</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span></span>
<span class="line">    root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    transform<span class="token operator">=</span>transform</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PyTorch 提供 torchvision.datasets 方便地下载和加载 MNIST 数据集，并使用 transforms 对数据进行预处理。其中数据预处理采用：1、ToTensor()：将图像转换为 PyTorch 张量（tensor）；2、Normalize((0.1307,), (0.3081,))：对数据进行标准化，使均值为 0.1307，标准差为 0.3081。</p><h3 id="_1-4-绘制数据集" tabindex="-1"><a class="header-anchor" href="#_1-4-绘制数据集"><span>1.4 绘制数据集</span></a></h3><p>绘制 12 张训练集和 4 张测试集图像，并在图上右下角标出数据集图像的id。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 绘制训练集图像</span></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&quot;MNIST Dataset Examples&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 绘制 21 张训练集图像</span></span>
<span class="line">    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 绘制第 i+1 张图像</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 不显示坐标轴</span></span>
<span class="line">    img <span class="token operator">=</span> train_dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取第 i 张图像</span></span>
<span class="line">    label <span class="token operator">=</span> train_dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 获取第 i 张图像的标签</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&quot;gray&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 绘制第 i 张图像</span></span>
<span class="line">    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>label<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 在图像右下角标出红色标签</span></span>
<span class="line"><span class="token comment"># 绘制测试集图像</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 绘制 7 张测试集图像</span></span>
<span class="line">    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token comment"># 绘制第 i+22 张图像</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 不显示坐标轴</span></span>
<span class="line">    img <span class="token operator">=</span> test_dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取第 i 张图像</span></span>
<span class="line">    label <span class="token operator">=</span> test_dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 获取第 i 张图像的标签</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&quot;gray&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 绘制第 i 张图像</span></span>
<span class="line">    plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>label<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 在图像右下角标出绿色标签</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-构建-lenet-神经网络模型" tabindex="-1"><a class="header-anchor" href="#_2-构建-lenet-神经网络模型"><span>2 构建 LeNet 神经网络模型</span></a></h2><h3 id="_2-1-构建-lenet-模型" tabindex="-1"><a class="header-anchor" href="#_2-1-构建-lenet-模型"><span>2.1 构建 LeNet 模型</span></a></h3><p>定义了 LeNet 模型，LeNet 是 Yann LeCun 在 1989 年提出的经典卷积神经网络（CNN），主要用于手写字符识别。其中包含两个卷积层、两个池化层和三个全连接层。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 导入必要的库</span></span>
<span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim</span>
<span class="line"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> transforms</span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F</span>
<span class="line"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> confusion_matrix</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>signal <span class="token keyword">import</span> convolve2d</span>
<span class="line"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MaxPool2d</span>
<span class="line"><span class="token keyword">import</span> math</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义 LeNet 神经网络模型类，继承自 nn.Module</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 初始化父类 nn.Module</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 第一个卷积层：</span></span>
<span class="line">        <span class="token comment"># 输入通道：1（灰度图像），输出通道：6，卷积核大小：5x5</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 定义池化层：</span></span>
<span class="line">        <span class="token comment"># 使用 2x2 的最大池化，能够减小特征图的尺寸</span></span>
<span class="line">        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 第二个卷积层：</span></span>
<span class="line">        <span class="token comment"># 输入通道：6，输出通道：16，卷积核大小：5x5</span></span>
<span class="line">        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 第一个全连接层：</span></span>
<span class="line">        <span class="token comment"># 输入特征数为 16*4*4（经过两次卷积和池化后的特征图尺寸），输出特征数为 120</span></span>
<span class="line">        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 第二个全连接层：将 120 个特征映射到 84 个特征</span></span>
<span class="line">        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">84</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 第三个全连接层：输出 10 个类别，对应 MNIST 中 10 个数字</span></span>
<span class="line">        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">84</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 将输入通过第一个卷积层，并使用 ReLU 激活函数增加非线性</span></span>
<span class="line">        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 应用池化层，减小特征图尺寸</span></span>
<span class="line">        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 第二个卷积层 + ReLU 激活</span></span>
<span class="line">        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 再次池化</span></span>
<span class="line">        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 将多维特征图展平为一维向量，为全连接层做准备</span></span>
<span class="line">        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 第一个全连接层 + ReLU 激活</span></span>
<span class="line">        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 第二个全连接层 + ReLU 激活</span></span>
<span class="line">        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment"># 第三个全连接层得到最终输出（未经过激活，后续会结合损失函数使用）</span></span>
<span class="line">        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> x</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这部分的代码定义了 LeNet 模型。通过两个卷积层和池化层逐步提取图像特征，再通过全连接层进行分类。注意，由于 MNIST 图像尺寸为 28×28，经过两次卷积和池化后，特征图尺寸正好为 4×4（通道数为 16），因此全连接层的输入特征数为 16<em>4</em>4。</p><h3 id="_2-2-lenet-模型结构图" tabindex="-1"><a class="header-anchor" href="#_2-2-lenet-模型结构图"><span>2.2 LeNet 模型结构图</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 打印模型结构</span></span>
<span class="line">model <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">模型的每一层结构：</span>
<span class="line">    第一个卷积层 (conv1)：</span>
<span class="line">        输入：1 个通道（灰度图像）</span>
<span class="line">        输出：6 个特征图</span>
<span class="line">        卷积核：5×5</span>
<span class="line">        步长：1</span>
<span class="line">        输入尺寸：28×28 → 输出尺寸：24×24</span>
<span class="line">    第一个池化层 (pool)：</span>
<span class="line">        池化窗口：2×2</span>
<span class="line">        步长：2</span>
<span class="line">        输入尺寸：24×24 → 输出尺寸：12×12</span>
<span class="line">    第二个卷积层 (conv2)：</span>
<span class="line">        输入：6 个通道</span>
<span class="line">        输出：16 个特征图</span>
<span class="line">        卷积核：5×5</span>
<span class="line">        步长：1</span>
<span class="line">        输入尺寸：12×12 → 输出尺寸：8×8</span>
<span class="line">    第二个池化层 (pool)：</span>
<span class="line">        池化窗口：2×2</span>
<span class="line">        步长：2</span>
<span class="line">        输入尺寸：8×8 → 输出尺寸：4×4</span>
<span class="line">        第一个全连接层 (fc1)：</span>
<span class="line">        输入：256 个特征（16×4×4）</span>
<span class="line">        输出：120 个神经元</span>
<span class="line">    第二个全连接层 (fc2)：</span>
<span class="line">        输入：120 个特征</span>
<span class="line">        输出：84 个神经元</span>
<span class="line">        第三个全连接层 (fc3)：</span>
<span class="line">        输入：84 个特征</span>
<span class="line">        输出：10 个神经元（对应 10 个数字类别）</span>
<span class="line">    </span>
<span class="line">    数据流向说明：</span>
<span class="line">        输入的 28×28 图像首先经过第一个卷积层，生成 6 个 24×24 的特征图</span>
<span class="line">        经过池化层后，特征图变为 6 个 12×12</span>
<span class="line">        第二个卷积层将特征图转换为 16 个 8×8 的特征图</span>
<span class="line">        再次池化后，得到 16 个 4×4 的特征图</span>
<span class="line">        将特征图展平为一维向量（16×4×4 = 256）</span>
<span class="line">        通过三个全连接层逐步将特征降维，最终输出 10 个类别的概率分布</span>
<span class="line">        这种结构设计使得网络能够逐层提取图像的特征，从低级的边缘特征到高级的抽象特征，最终实现手写数字的分类。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-模型训练和评估" tabindex="-1"><a class="header-anchor" href="#_3-模型训练和评估"><span>3 模型训练和评估</span></a></h2><h3 id="_3-1-创建数据加载器" tabindex="-1"><a class="header-anchor" href="#_3-1-创建数据加载器"><span>3.1 创建数据加载器</span></a></h3><p>DataLoader 用于批量加载数据，提高训练效率。设定 batch_size=64 以每次处理 64 张图像。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1307</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.3081</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span></span>
<span class="line">    root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">    transform<span class="token operator">=</span>transform</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">train_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">&#39;./data&#39;</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">train_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 创建数据加载器</span></span>
<span class="line">train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span></span>
<span class="line">    dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span></span>
<span class="line">    batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span></span>
<span class="line">    shuffle<span class="token operator">=</span><span class="token boolean">True</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span></span>
<span class="line">    dataset<span class="token operator">=</span>test_dataset<span class="token punctuation">,</span></span>
<span class="line">    batch_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span></span>
<span class="line">    shuffle<span class="token operator">=</span><span class="token boolean">False</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-定义训练函数" tabindex="-1"><a class="header-anchor" href="#_3-2-定义训练函数"><span>3.2 定义训练函数</span></a></h3><p>训练时采用随机梯度下降（SGD）优化器，损失函数采用交叉熵损失（CrossEntropyLoss）。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 定义训练函数，用于在训练集上训练模型</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    train_loss <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    correct <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> batch_idx<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        data<span class="token punctuation">,</span> target <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></span>
<span class="line">        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 累计损失和正确预测数</span></span>
<span class="line">        train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> data<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        pred <span class="token operator">=</span> output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">        correct <span class="token operator">+=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>view_as<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> batch_idx <span class="token operator">%</span> <span class="token number">5000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Train Epoch: </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string"> [</span><span class="token interpolation"><span class="token punctuation">{</span>batch_idx <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">]\\tLoss: </span><span class="token interpolation"><span class="token punctuation">{</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.6f</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 计算平均损失和准确率</span></span>
<span class="line">    train_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span></span>
<span class="line">    accuracy <span class="token operator">=</span> <span class="token number">100.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> train_loss<span class="token punctuation">,</span> accuracy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-定义测试函数" tabindex="-1"><a class="header-anchor" href="#_3-3-定义测试函数"><span>3.3 定义测试函数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 定义测试函数，用于评估模型在测试集上的表现</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> test_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将模型设置为评估模式，关闭 dropout 等训练特性</span></span>
<span class="line">    test_loss <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 初始化测试损失</span></span>
<span class="line">    correct <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment"># 初始化预测正确的样本计数</span></span>
<span class="line">    all_preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于存储所有预测结果</span></span>
<span class="line">    all_targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于存储所有真实标签</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 在测试阶段不计算梯度，节省内存和加快计算速度</span></span>
<span class="line">    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">for</span> data<span class="token punctuation">,</span> target <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span></span>
<span class="line">            data<span class="token punctuation">,</span> target <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></span>
<span class="line">            output <span class="token operator">=</span> model<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">            test_loss <span class="token operator">+=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> data<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            pred <span class="token operator">=</span> output<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">            correct <span class="token operator">+=</span> pred<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>target<span class="token punctuation">.</span>view_as<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment"># 收集预测结果和真实标签</span></span>
<span class="line">            all_preds<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            all_targets<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>target<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    test_loss <span class="token operator">/=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>  <span class="token comment"># 计算平均损失</span></span>
<span class="line">    accuracy <span class="token operator">=</span> <span class="token number">100.</span> <span class="token operator">*</span> correct <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_loader<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span>  <span class="token comment"># 计算准确率</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 计算混淆矩阵</span></span>
<span class="line"></span>
<span class="line">    cm <span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>all_targets<span class="token punctuation">,</span> all_preds<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> test_loss<span class="token punctuation">,</span> accuracy<span class="token punctuation">,</span> cm</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-主函数-训练与评估模型" tabindex="-1"><a class="header-anchor" href="#_3-4-主函数-训练与评估模型"><span>3.4 主函数：训练与评估模型</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 检查是否有 GPU 可用，否则使用 CPU</span></span>
<span class="line">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&quot;cuda&quot;</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&quot;mps&quot;</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>mps<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&quot;cpu&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 实例化 LeNet 模型，并移动到指定设备上</span></span>
<span class="line">model <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-优化器与损失函数" tabindex="-1"><a class="header-anchor" href="#_3-5-优化器与损失函数"><span>3.5 优化器与损失函数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 定义优化器：使用随机梯度下降（SGD），学习率为 0.01，动量为 0.9</span></span>
<span class="line">optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 定义损失函数：交叉熵损失函数常用于分类问题</span></span>
<span class="line">criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-开始训练" tabindex="-1"><a class="header-anchor" href="#_3-6-开始训练"><span>3.6 开始训练</span></a></h3><p>以下代码主要涉及模型训练、训练过程可视化、卷积运算的直观理解及卷积核的可视化，包括训练循环、损失与准确率曲线绘制、手动卷积运算及最大池化效果展示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 用于记录训练过程的指标</span></span>
<span class="line">train_losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">train_accs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">test_losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">test_accs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">epochs <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 设定训练轮数为 20</span></span>
<span class="line"><span class="token comment"># 循环训练和测试模型</span></span>
<span class="line"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 训练并记录指标</span></span>
<span class="line">    train_loss<span class="token punctuation">,</span> train_acc <span class="token operator">=</span> train<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> train_loader<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span></span>
<span class="line">    test_loss<span class="token punctuation">,</span> test_acc<span class="token punctuation">,</span> cm <span class="token operator">=</span> test<span class="token punctuation">(</span>model<span class="token punctuation">,</span> device<span class="token punctuation">,</span> test_loader<span class="token punctuation">,</span> criterion<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 保存指标</span></span>
<span class="line">    train_losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_loss<span class="token punctuation">)</span></span>
<span class="line">    train_accs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span></span>
<span class="line">    test_losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_loss<span class="token punctuation">)</span></span>
<span class="line">    test_accs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\nEpoch </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string">:&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Train - Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>train_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>train_acc<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">%&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Test  - Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>test_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Accuracy: </span><span class="token interpolation"><span class="token punctuation">{</span>test_acc<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">%\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">初始化存储变量：</span>
<span class="line">train_losses / train_accs：用于存储训练时的 损失值 和 准确率。</span>
<span class="line">test_losses / test_accs：用于存储测试集的 损失值 和 准确率。</span>
<span class="line">训练过程</span>
<span class="line">设定 epochs=20</span>
<span class="line">在循环中：</span>
<span class="line">调用 train() 进行训练，返回 训练损失（train_loss）和准确率（train_acc）。</span>
<span class="line">调用 test() 进行测试，返回 测试损失（test_loss）和准确率（test_acc）。</span>
<span class="line">记录 损失和准确率 方便后续可视化。</span>
<span class="line">打印 每轮训练和测试的结果。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-绘制训练过程图表" tabindex="-1"><a class="header-anchor" href="#_3-7-绘制训练过程图表"><span>3.7 绘制训练过程图表</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 绘制训练过程图表</span></span>
<span class="line">epochs_range <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 绘制损失曲线</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs_range<span class="token punctuation">,</span> train_losses<span class="token punctuation">,</span> <span class="token string">&#39;bo-&#39;</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;Training Loss&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs_range<span class="token punctuation">,</span> test_losses<span class="token punctuation">,</span> <span class="token string">&#39;ro-&#39;</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;Test Loss&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Model Loss&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;Epoch&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;Loss&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 绘制准确率曲线</span></span>
<span class="line">plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs_range<span class="token punctuation">,</span> train_accs<span class="token punctuation">,</span> <span class="token string">&#39;bo-&#39;</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;Training Accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>epochs_range<span class="token punctuation">,</span> test_accs<span class="token punctuation">,</span> <span class="token string">&#39;ro-&#39;</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;Test Accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Model Accuracy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;Epoch&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;Accuracy (%)&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.手动实现 2D 卷积</span>
<span class="line">    选取 test_dataset[0] 的图像（28×28）。</span>
<span class="line">    采用 3x3 边缘检测卷积核，其中：</span>
<span class="line">    左侧 -1：检测 垂直边缘。</span>
<span class="line">    右侧 +1：增强 边界特征。</span>
<span class="line">    convolve2d() 计算卷积，mode=&#39;valid&#39; 让输出 不填充零，尺寸变小。</span>
<span class="line">2.可视化</span>
<span class="line">    显示 原始图片 和 卷积后的图像。</span>
<span class="line">    scale_factor 调整 子图比例 使其对齐。</span>
<span class="line">3.绘制损失曲线</span>
<span class="line">    train_losses 和 test_losses 分别绘制为 蓝色点线 和 红色点线。</span>
<span class="line">    纵轴表示 损失值，横轴表示训练轮数（Epochs）。</span>
<span class="line">    目标：观察损失是否随训练减少，并比较训练与测试的收敛情况。</span>
<span class="line">4.绘制准确率曲线</span>
<span class="line">    train_accs 和 test_accs 分别绘制为 蓝色点线 和 红色点线。</span>
<span class="line">    目标：观察模型的准确率是否 逐渐提高，并对比训练与测试的 过拟合情况。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-详解卷积滤波器的训练过程" tabindex="-1"><a class="header-anchor" href="#_4-详解卷积滤波器的训练过程"><span>4 详解卷积滤波器的训练过程</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>signal <span class="token keyword">import</span> convolve2d</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 原始矩阵</span></span>
<span class="line">matrix <span class="token operator">=</span> test_dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3x3 卷积核</span></span>
<span class="line">kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 进行卷积运算</span></span>
<span class="line">convolved <span class="token operator">=</span> convolve2d<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> kernel<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;valid&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 计算子图尺寸比例</span></span>
<span class="line">original_shape <span class="token operator">=</span> matrix<span class="token punctuation">.</span>shape</span>
<span class="line">convolved_shape <span class="token operator">=</span> convolved<span class="token punctuation">.</span>shape</span>
<span class="line"></span>
<span class="line">fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 计算比例因子，使卷积后的小图与原图比例协调</span></span>
<span class="line">scale_factor <span class="token operator">=</span> original_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> convolved_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调整原始矩阵子图</span></span>
<span class="line">axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">&#39;nearest&#39;</span><span class="token punctuation">,</span> aspect<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">&quot;Original Matrix&quot;</span><span class="token punctuation">)</span></span>
<span class="line">axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 调整卷积后矩阵子图，缩放至与原图比例协调</span></span>
<span class="line">axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>convolved<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">&#39;nearest&#39;</span><span class="token punctuation">,</span> aspect<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span>scale_factor<span class="token punctuation">)</span></span>
<span class="line">axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">&quot;Convolved Matrix&quot;</span><span class="token punctuation">)</span></span>
<span class="line">axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-可视化理解" tabindex="-1"><a class="header-anchor" href="#_4-1-可视化理解"><span>4.1 可视化理解</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">提取第一层卷积核</span>
<span class="line">    conv1_weights = model.conv1.weight.data 读取 已训练的卷积核。</span>
<span class="line">    print(conv1_weights) 查看权重数值。</span>
<span class="line">可视化卷积运算</span>
<span class="line">    遍历 conv1_weights，逐个卷积 原始图片，查看 特征提取效果。</span>
<span class="line">    经过 convolve2d() 计算卷积后，使用 maxpool() 进行 2×2 最大池化，进一步提取关键特征。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">conv1_weights <span class="token operator">=</span> model<span class="token punctuation">.</span>conv1<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>conv1_weights<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 最大池化层</span></span>
<span class="line">maxpool <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">num_kernels <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>conv1_weights<span class="token punctuation">)</span></span>
<span class="line">num_cols <span class="token operator">=</span> <span class="token number">6</span></span>
<span class="line">num_rows <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>num_kernels <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">/</span> num_cols<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span>num_cols <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> num_rows <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> kernel_idx<span class="token punctuation">,</span> kernel <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>conv1_weights<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    convolved_image <span class="token operator">=</span> convolve2d<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> kernel<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;valid&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    pooled_image <span class="token operator">=</span> maxpool<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>convolved_image<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    </span>
<span class="line"></span>
<span class="line">    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>num_rows<span class="token punctuation">,</span> num_cols<span class="token punctuation">,</span> kernel_idx <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">&#39;nearest&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&quot;Original&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>num_rows<span class="token punctuation">,</span> num_cols<span class="token punctuation">,</span> kernel_idx <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>convolved_image<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">&#39;nearest&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Convolved (</span><span class="token interpolation"><span class="token punctuation">{</span>kernel_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span>num_rows<span class="token punctuation">,</span> num_cols<span class="token punctuation">,</span> kernel_idx <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>pooled_image<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">&#39;gray&#39;</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">&#39;nearest&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Pooled (</span><span class="token interpolation"><span class="token punctuation">{</span>kernel_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">&quot;off&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">本次课堂作业通过Conda创建独立的深度学习环境，并安装PyTorch、torchvision等工具，为构建和训练LeNet神经网络奠定了基础。在实验过程中，我们完成了数据加载、模型构建、训练与评估等关键步骤，成功实现了一个基于PyTorch的手写数字识别模型。  </span>
<span class="line">通过本次实验，深入理解了神经网络训练的基本原理，掌握了卷积神经网络（CNN）在图像处理中的优势，并学习了卷积操作及池化层如何提取图像特征。此外，我们还利用可视化技术分析了卷积核的作用，增强了对CNN结构的直观理解。  </span>
<span class="line">本实验不仅提供了对LeNet结构及PyTorch训练流程的实践经验，也为进一步研究更复杂的深度学习模型打下了基础。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51)]))}const i=s(e,[["render",l],["__file","quarto.html.vue"]]),u=JSON.parse('{"path":"/blogs/Software/CNN/quarto.html","title":"《数据驱动的可重复性研究课堂作业》——手搓神经网络模型","lang":"en-US","frontmatter":{"title":"《数据驱动的可重复性研究课堂作业》——手搓神经网络模型","date":"2025/03/14","tags":["pytorch"],"categories":["Software"]},"headers":[{"level":2,"title":"前言与环境准备","slug":"前言与环境准备","link":"#前言与环境准备","children":[]},{"level":2,"title":"1 配置环境和下载数据集","slug":"_1-配置环境和下载数据集","link":"#_1-配置环境和下载数据集","children":[{"level":3,"title":"1.1 配置 Conda 环境","slug":"_1-1-配置-conda-环境","link":"#_1-1-配置-conda-环境","children":[]},{"level":3,"title":"1.2 安装 PyTorch 和 torchvision","slug":"_1-2-安装-pytorch-和-torchvision","link":"#_1-2-安装-pytorch-和-torchvision","children":[]},{"level":3,"title":"1.3 下载 MNIST 数据集","slug":"_1-3-下载-mnist-数据集","link":"#_1-3-下载-mnist-数据集","children":[]},{"level":3,"title":"1.4 绘制数据集","slug":"_1-4-绘制数据集","link":"#_1-4-绘制数据集","children":[]}]},{"level":2,"title":"2 构建 LeNet 神经网络模型","slug":"_2-构建-lenet-神经网络模型","link":"#_2-构建-lenet-神经网络模型","children":[{"level":3,"title":"2.1 构建 LeNet 模型","slug":"_2-1-构建-lenet-模型","link":"#_2-1-构建-lenet-模型","children":[]},{"level":3,"title":"2.2 LeNet 模型结构图","slug":"_2-2-lenet-模型结构图","link":"#_2-2-lenet-模型结构图","children":[]}]},{"level":2,"title":"3 模型训练和评估","slug":"_3-模型训练和评估","link":"#_3-模型训练和评估","children":[{"level":3,"title":"3.1 创建数据加载器","slug":"_3-1-创建数据加载器","link":"#_3-1-创建数据加载器","children":[]},{"level":3,"title":"3.2 定义训练函数","slug":"_3-2-定义训练函数","link":"#_3-2-定义训练函数","children":[]},{"level":3,"title":"3.3 定义测试函数","slug":"_3-3-定义测试函数","link":"#_3-3-定义测试函数","children":[]},{"level":3,"title":"3.4 主函数：训练与评估模型","slug":"_3-4-主函数-训练与评估模型","link":"#_3-4-主函数-训练与评估模型","children":[]},{"level":3,"title":"3.5 优化器与损失函数","slug":"_3-5-优化器与损失函数","link":"#_3-5-优化器与损失函数","children":[]},{"level":3,"title":"3.6 开始训练","slug":"_3-6-开始训练","link":"#_3-6-开始训练","children":[]},{"level":3,"title":"3.7 绘制训练过程图表","slug":"_3-7-绘制训练过程图表","link":"#_3-7-绘制训练过程图表","children":[]}]},{"level":2,"title":"4 详解卷积滤波器的训练过程","slug":"_4-详解卷积滤波器的训练过程","link":"#_4-详解卷积滤波器的训练过程","children":[{"level":3,"title":"4.1 可视化理解","slug":"_4-1-可视化理解","link":"#_4-1-可视化理解","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"blogs/Software/CNN/quarto.md"}');export{i as comp,u as data};
